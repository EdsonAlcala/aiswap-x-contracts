{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/AISwap.sol": {
      "content": "//SPDX-License-Identifier: agpl-3.0\npragma solidity 0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nerror AuctionDoesNotExist();\nerror AuctionIsNotOpen();\nerror OnlyAuctionOwner();\nerror AuctionIsNotExpired();\nerror AuctionPeriodPassed();\nerror AuctionIsNotClaimed();\nerror InvalidClaimer();\nerror ChallengePeriodInProgress();\n\n// Contract that allows you to cross chain swap tokens in a trustless way using a permissionless auction mechanism\ncontract AISwap {\n    uint256 public constant AUCTION_PERIOD = 1 minutes; // @dev You could think about this like a way to guarantee a fast swap\n    uint256 public constant CHALLENGE_PERIOD = 5 minutes; // @dev This is the time that the claimer has to wait in order to settle the auction\n\n    struct Auction {\n        uint256 auctionId;\n        address tokenInputAddress;\n        address tokenOutputAddress;\n        uint256 tokenInputAmount;\n        uint256 minimumTokenOutputAmount;\n        uint256 creationTime; // @dev This is the time when the auction is created\n        uint256 claimingTime; // @dev This is the time when the auction is claimed\n        address claimer; // @dev This is the address of the claimer\n        address owner; // @dev This is the address of the owner of the auction\n        uint256 sourceChain;\n        uint256 destinationChain;\n        AuctionStatus auctionStatus;\n    }\n\n    struct AuctionOrder {\n        address tokenInputAddress;\n        address tokenOutputAddress;\n        uint256 tokenInputAmount;\n        uint256 minimumTokenOutputAmount;\n        uint256 sourceChain;\n        uint256 destinationChain;\n    }\n\n    enum AuctionStatus {\n        OPEN,\n        CLAIMED,\n        SETTLED,\n        EXPIRED\n    }\n\n    uint256 public auctionCount;\n\n    mapping(uint256 => Auction) public auctions;\n    mapping(uint256 => bool) public auctionExists;\n\n    // @dev event triggered when an auction is created\n    event AuctionCreated(\n        uint256 auctionId,\n        address tokenInputAddress,\n        address tokenOutputAddress,\n        uint256 tokenInputAmount,\n        uint256 minimumTokenOutputAmount,\n        uint256 creationTime,\n        address owner,\n        uint256 sourceChain,\n        uint256 destinationChain,\n        AuctionStatus auctionStatus\n    );\n\n    // @dev event triggered when the auction owner reclaims the funds after the auction expired\n    event AuctionFundsClaimed(uint256 auctionId, AuctionStatus auctionStatus);\n\n    // @dev event triggered when the auction is claimed\n    event AuctionClaimed(uint256 auctionId, uint256 claimingTime, address claimer, AuctionStatus auctionStatus);\n\n    // @dev event triggered when the auction is settled\n    event AuctionSettled(uint256 auctionId, AuctionStatus auctionStatus);\n\n    // Swapper Functions\n    function createAuction(AuctionOrder calldata _order) external {\n        uint256 auctionId = ++auctionCount;\n        uint256 creationTime = block.timestamp;\n\n        auctions[auctionId] = Auction(\n            auctionId,\n            _order.tokenInputAddress,\n            _order.tokenOutputAddress,\n            _order.tokenInputAmount,\n            _order.minimumTokenOutputAmount,\n            creationTime,\n            0, // @dev claiming time is zero at creation\n            address(0), // @dev claimer is zero at creation\n            msg.sender, // @dev owner is the sender\n            _order.sourceChain,\n            _order.destinationChain,\n            AuctionStatus.OPEN\n        );\n\n        auctionExists[auctionId] = true;\n\n        // transfer tokens to this contract\n        IERC20(_order.tokenInputAddress).transferFrom(msg.sender, address(this), _order.tokenInputAmount);\n\n        emit AuctionCreated(\n            auctionId,\n            _order.tokenInputAddress,\n            _order.tokenOutputAddress,\n            _order.tokenInputAmount,\n            _order.minimumTokenOutputAmount,\n            creationTime,\n            msg.sender,\n            _order.sourceChain,\n            _order.destinationChain,\n            AuctionStatus.OPEN\n        );\n    }\n\n    function reclaimAuctionFunds(uint256 _auctionId)\n        external\n        onlyValidAuctionIds(_auctionId)\n        onlyAuctionOwner(_auctionId)\n    {\n        // @dev only open auctions that expired can be reclaimed\n        if (auctions[_auctionId].auctionStatus != AuctionStatus.OPEN) {\n            revert AuctionIsNotOpen();\n        }\n\n        // @dev only expired auctions can be reclaimed\n        if (block.timestamp < auctions[_auctionId].creationTime + AUCTION_PERIOD) {\n            revert AuctionIsNotExpired();\n        }\n\n        auctions[_auctionId].auctionStatus = AuctionStatus.EXPIRED;\n\n        // transfer tokens back to the owner\n        IERC20(auctions[_auctionId].tokenInputAddress).transfer(\n            auctions[_auctionId].owner, auctions[_auctionId].tokenInputAmount\n        );\n\n        emit AuctionFundsClaimed(_auctionId, AuctionStatus.EXPIRED);\n    }\n\n    // Claimer Functions\n    function claimAuction(uint256 _auctionId) external onlyValidAuctionIds(_auctionId) {\n        // @dev only open auctions can be claimed\n        if (auctions[_auctionId].auctionStatus != AuctionStatus.OPEN) {\n            revert AuctionIsNotOpen();\n        }\n\n        // @dev only auctions that are within the auction period can be claimed\n        if (block.timestamp > auctions[_auctionId].creationTime + AUCTION_PERIOD) {\n            revert AuctionPeriodPassed();\n        }\n\n        auctions[_auctionId].auctionStatus = AuctionStatus.CLAIMED;\n        auctions[_auctionId].claimingTime = block.timestamp;\n        auctions[_auctionId].claimer = msg.sender;\n\n        emit AuctionClaimed(_auctionId, block.timestamp, msg.sender, AuctionStatus.CLAIMED);\n    }\n\n    function settleAuction(uint256 _auctionId) external onlyValidAuctionIds(_auctionId) {\n        // @dev auction has to be CLAIMED\n        if (auctions[_auctionId].auctionStatus != AuctionStatus.CLAIMED) {\n            revert AuctionIsNotClaimed();\n        }\n\n        // @dev cannot claim before the challenge period ends\n        if (block.timestamp < auctions[_auctionId].claimingTime + CHALLENGE_PERIOD) {\n            revert ChallengePeriodInProgress();\n        }\n\n        // @dev only claimer can settle\n        if (auctions[_auctionId].claimer != msg.sender) {\n            revert InvalidClaimer();\n        }\n\n        auctions[_auctionId].auctionStatus = AuctionStatus.SETTLED;\n\n        // @dev transfer input tokens to the claimer\n        IERC20(auctions[_auctionId].tokenInputAddress).transfer(\n            auctions[_auctionId].claimer, auctions[_auctionId].tokenInputAmount\n        );\n\n        emit AuctionSettled(_auctionId, AuctionStatus.SETTLED);\n    }\n\n    // Modifiers\n    modifier onlyValidAuctionIds(uint256 _auctionId) {\n        if (!auctionExists[_auctionId]) {\n            revert AuctionDoesNotExist();\n        }\n        _;\n    }\n\n    modifier onlyAuctionOwner(uint256 _auctionId) {\n        if (auctions[_auctionId].owner != msg.sender) {\n            revert OnlyAuctionOwner();\n        }\n        _;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}